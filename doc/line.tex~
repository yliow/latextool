\section{Line}

API:
\begin{python}
s = r'''
from latextool_basic import Line, verbatim
print verbatim(Line.__doc__)
'''

from latextool_basic import execute
execute(s, print_source=True)
\end{python}



\newpage
TEST 1. Test linecolor, linewidth, startstyle, endstyle

\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(x0=0, y0=0, x1=1, y1=1)
p += Line(x0=3, y0=0, x1=6, y1=2, linecolor='red', linewidth=0.1)
p += Line(x0=6, y0=0, x1=9, y1=2, linecolor='red', linewidth=0.2, 
                                  linestyle='dashed')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}




\newpage
TEST 2.

\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(x0=0, y0=0, x1=1, y1=1, startstyle='>')
p += Line(x0=3, y0=0, x1=6, y1=2, linecolor='red', linewidth=0.1, 
                                  endstyle='>')
p += Line(x0=6, y0=0, x1=9, y1=2, linecolor='red', linewidth=0.2, 
                                  linestyle='dashed', 
                                  startstyle='>', endstyle='>')
p += Line(x0=9, y0=0, x1=12, y1=2, linecolor='blue', linewidth=0.1,  
                                   startstyle='>|', endstyle='>|')
p += Line(x0=12, y0=0, x1=15, y1=2, linecolor='blue', linewidth=0.05,  
                                   startstyle='>>', endstyle='>>')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}




\newpage
TEST 3. Test \verb!arrowstyle=triangle!.

\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(x0=0, y0=0, x1=1, y1=1, startstyle='->', arrowstyle='triangle')
p += Line(x0=3, y0=0, x1=6, y1=2, linecolor='red', linewidth=0.1, 
                                  endstyle='->', arrowstyle='triangle')
p += Line(x0=6, y0=0, x1=9, y1=2, linecolor='red', linewidth=0.2, 
                                  linestyle='dashed', 
                                  startstyle='->', endstyle='->', 
                                  arrowstyle='triangle')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}




\newpage
TEST 4: Test \verb!startstyle='dot'!.
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(x0=0, y0=0, x1=1, y1=1, startstyle='->', 
                                  arrowstyle='triangle', endstyle='dot')
p += Line(x0=3, y0=0, x1=6, y1=2, linecolor='red', linewidth=0.02, 
                                  endstyle='->', arrowstyle='triangle',
                                  startstyle='dot', r=0.2)
p += Line(x0=6, y0=0, x1=9, y1=2, linecolor='black', linewidth=0.05, 
                                  linestyle='dashed', startstyle='dot', 
                                  endstyle='->',  arrowstyle='triangle')
p += Grid()
print p
"""
from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}


\newpage
TEST 5: Test \verb!points!:
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(points=[(1,4), (0,0), (5,0), (6,3)], 
          linecolor='blue', linewidth=0.1, 
          startstyle='->', arrowstyle='triangle', endstyle='dot')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}



\newpage
Test 6. Testing spacing. 

\lipsum[1]
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
p += Line(points=[(1,4), (0,0), (5,0), (6,3)], 
          linecolor='blue', linewidth=0.1, 
          startstyle='->', arrowstyle='triangle', endstyle='dot')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
#print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}
\lipsum[1]


\newpage
TEST 7. Test boundary points
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()

aline = Line(points=[(1,4), (0,0), (5,0), (6,3)], 
             linecolor='blue', linewidth=0.1, 
             startstyle='->', arrowstyle='triangle', endstyle='dot')
p += aline
p += Circle(center=aline.top(), r=0.25, background='red')
p += Circle(center=aline.bottom(), r=0.25, background='red')
p += Circle(center=aline.left(), r=0.25, background='red')
p += Circle(center=aline.right(), r=0.25, background='red')
p += Circle(center=aline.topleft(), r=0.25, background='red')
p += Circle(center=aline.topright(), r=0.25, background='red')
p += Circle(center=aline.bottomleft(), r=0.25, background='red')
p += Circle(center=aline.bottomright(), r=0.25, background='red')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}



\newpage
TEST 8. Test points
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()

aline = Line(points=[(1,4), (0,0), (5,0), (6,3)], 
             linecolor='blue', linewidth=0.1, 
             startstyle='->', arrowstyle='triangle', endstyle='dot')
for point in aline.points:
    p += Circle(center=point, r=0.3, background='red')

p += aline
p += Grid()
print p
"""



from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}







\newpage
TEST 9. Test midpoint for 1 segment.
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
def linewithpoints(p, points, color1, color2):
    aline = Line(points=points, linecolor=color1, linewidth=0.2, 
                 startstyle='dot', arrowstyle='triangle', endstyle='->')
    p += aline
    for i in [0, 0.2, 0.4, 0.6, 0.8, 1.0]:
        p += Circle(center=aline.midpoint(ratio=i), r=0.4, 
                    background=color2, label=r'{\texttt{%s}}' % i)
linewithpoints(p, [(0, 0), (10, 0)], 'red', 'red!20')
linewithpoints(p, [(10, -1), (0, -1)], 'red', 'red!20')
linewithpoints(p, [(0, -2), (10, -3)], 'blue', 'red!20')
linewithpoints(p, [(10, -4), (0, -3)], 'blue', 'red!20')
linewithpoints(p, [(0, -6), (10, -5)], 'blue', 'red!20')
linewithpoints(p, [(10, -6), (0, -7)], 'blue', 'red!20')
linewithpoints(p, [(11, -7), (11, 0)], 'green', 'red!20')
linewithpoints(p, [(12, 0), (12, -7)], 'green', 'red!20')
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}





\newpage
TEST 10. Test midpoint for 1 segment.
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
points = [(0,-1), (10,3), (12,-2), (5,-1), (5,-2), (1,-2)]
aline = Line(points=points, linecolor='blue', linewidth=0.2, 
             startstyle='dot', arrowstyle='triangle', endstyle='->')    
p += aline
for i in [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
    p += Circle(center=aline.midpoint(ratio=i), r=0.4, 
                background='red!20', label=r'{\texttt{%s}}' % i)
p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}


\newpage
TEST 11. Test short line with arrow tip (basically to test arrow tip).
\begin{python}
s = r"""
from latextool_basic import *
p = Plot()
for i, x in enumerate([0.2, 0.15, 0.1, 0.05, 0.01]):
    p += Line(points=[(1-x, i), (1, i)], linecolor='blue', linewidth=x, 
              endstyle='->')    
    p += Line(points=[(4-x, i), (4, i)], linecolor='blue', linewidth=x, 
              endstyle='->', arrowstyle='triangle')    
#p += Grid()
print p
"""

from latextool_basic import console, makeandincludegraphics
print console(s.strip())
print makeandincludegraphics(python=s)
\end{python}

For arrows with line width x, it seems enough to have a length of x.
